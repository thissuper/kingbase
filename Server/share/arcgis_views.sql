create schema if not exists sys_catalog;

create view sys_catalog.pg_type as select OID,* from sys_type;
create view sys_catalog.pg_roles as select * from sys_roles;
create view sys_catalog.pg_proc as select oid, * from SYS_PROC;
create view sys_catalog.pg_user as select * from sys_user;
create view sys_catalog.pg_namespace as select OID,* from sys_namespace;
create view sys_catalog.pg_database as select * from sys_database;
create view sys_catalog.pg_tablespace as select * from sys_tablespace;
create view sys_catalog.pg_constraint as select OID, * from sys_catalog.sys_constraint;
create view sys_catalog.pg_attribute as select * from SYS_ATTRIBUTE;
create view sys_catalog.pg_opclass as select oid,* from sys_opclass;
create view sys_catalog.pg_class as select OID,* from sys_class;
create view sys_catalog.pg_tables as select * from sys_tables;
create view sys_catalog.pg_group as select * from sys_group;
create view sys_catalog.pg_index as select  * from sys_index;
create view sys_catalog.pg_indexes as select * from sys_indexes;
create view sys_catalog.pg_attrdef as select oid, * from sys_attrdef;

create schema if not exists pg_catalog;
create view pg_catalog.pg_statistic as select * from SYS_STATISTIC;
create view pg_catalog.pg_audit_userlog as select * from SYS_AUDIT_USERLOG;
create view pg_catalog.pg_authid as select * from SYS_AUTHID;
create view pg_catalog.pg_user_mapping as select * from SYS_USER_MAPPING;
create view pg_catalog.pg_largeobject as select * from SYS_LARGEOBJECT;
create view pg_catalog.pg_type as select * from SYS_TYPE;
create view pg_catalog.pg_settings as select * from SYS_SETTINGS;
create view pg_catalog.pg_attribute as select * from SYS_ATTRIBUTE;
create view pg_catalog.pg_proc as select oid, * from SYS_PROC;
create view pg_catalog.pg_attrdef as select oid, * from SYS_ATTRDEF;
create view pg_catalog.pg_constraint as select * from SYS_CONSTRAINT;
create view pg_catalog.pg_inherits as select * from SYS_INHERITS;
create view pg_catalog.pg_index as select * from SYS_INDEX;
create view pg_catalog.pg_operator as select * from SYS_OPERATOR;
create view pg_catalog.pg_opfamily as select * from SYS_OPFAMILY;
create view pg_catalog.pg_opclass as select oid, * from SYS_OPCLASS;
create view pg_catalog.pg_am as select oid, * from SYS_AM ;
create view pg_catalog.pg_amop as select * from SYS_AMOP;
create view pg_catalog.pg_language as select * from SYS_LANGUAGE;
create view pg_catalog.pg_amproc as select * from SYS_AMPROC;
create view pg_catalog.pg_largeobject_metadata as select * from SYS_LARGEOBJECT_METADATA;
create view pg_catalog.pg_aggregate as select * from SYS_AGGREGATE;
create view pg_catalog.pg_rewrite as select * from SYS_REWRITE;
create view pg_catalog.pg_trigger as select * from SYS_TRIGGER;
create view pg_catalog.pg_event_trigger as select * from SYS_EVENT_TRIGGER;
create view pg_catalog.pg_description as select * from SYS_DESCRIPTION;
create view pg_catalog.pg_cast as select * from SYS_CAST;
create view pg_catalog.pg_enum as select * from SYS_ENUM;
create view pg_catalog.pg_package as select * from SYS_PACKAGE;
create view pg_catalog.pg_pkgvariable as select * from SYS_PKGVARIABLE;
create view pg_catalog.pg_conversion as select * from SYS_CONVERSION;
create view pg_catalog.pg_depend as select * from SYS_DEPEND;
create view pg_catalog.pg_database as select * from  SYS_DATABASE;
create view pg_catalog.pg_db_role_setting as select * from  SYS_DB_ROLE_SETTING;
create view pg_catalog.pg_tablespace as select * from  SYS_TABLESPACE;
create view pg_catalog.pg_pltemplate as select * from SYS_PLTEMPLATE;
create view pg_catalog.pg_auth_members as select * from SYS_AUTH_MEMBERS;
create view pg_catalog.pg_shdepend as select * from SYS_SHDEPEND;
create view pg_catalog.pg_shdescription as select * from SYS_SHDESCRIPTION;
create view pg_catalog.pg_ts_config as select * from SYS_TS_CONFIG;
create view pg_catalog.pg_ts_config_map as select * from SYS_TS_CONFIG_MAP;
create view pg_catalog.pg_ts_dict as select * from SYS_TS_DICT;
create view pg_catalog.pg_ts_parser as select * from SYS_TS_PARSER;
create view pg_catalog.pg_ts_template as select * from SYS_TS_TEMPLATE;
create view pg_catalog.pg_extension as select * from SYS_EXTENSION;
create view pg_catalog.pg_foreign_data_wrapper as select * from SYS_FOREIGN_DATA_WRAPPER;
create view pg_catalog.pg_foreign_server as select * from  SYS_FOREIGN_SERVER;
create view pg_catalog.pg_foreign_table as select * from SYS_FOREIGN_TABLE;
create view pg_catalog.pg_policy as select * from SYS_POLICY;
create view pg_catalog.pg_replication_origin as select * from  SYS_REPLICATION_ORIGIN;
create view pg_catalog.pg_default_acl as select * from  SYS_DEFAULT_ACL;
create view pg_catalog.pg_init_privs as select * from  SYS_INIT_PRIVS;
create view pg_catalog.pg_seclabel as select * from SYS_SECLABEL;
create view pg_catalog.pg_shseclabel as select * from  SYS_SHSECLABEL;
create view pg_catalog.pg_collation as select * from  SYS_COLLATION;
create view pg_catalog.pg_range as select * from  SYS_RANGE;
create view pg_catalog.pg_transform as select * from  SYS_TRANSFORM;
create view pg_catalog.pg_audit_blocklog as select * from  SYS_AUDIT_BLOCKLOG;
create view pg_catalog.pg_synonym as select * from  SYS_SYNONYM;
create view pg_catalog.pg_mac_compartment as select * from  SYS_MAC_COMPARTMENT;
create view pg_catalog.pg_mac_label as select * from  SYS_MAC_LABEL;
create view pg_catalog.pg_mac_level as select * from  SYS_MAC_LEVEL;
create view pg_catalog.pg_mac_policy as select * from  SYS_MAC_POLICY;
create view pg_catalog.pg_mac_user as select * from  SYS_MAC_USER;
create view pg_catalog.pg_mac_policy_enforcement as select * from  SYS_MAC_POLICY_ENFORCEMENT;
create view pg_catalog.pg_roles as select * from sys_catalog.sys_roles;
create view pg_catalog.pg_namespace as select OID, * from sys_catalog.sys_namespace;
create view pg_catalog.pg_class as select OID, * from sys_class;
create view pg_catalog.pg_rules as select * from sys_rules;
create view pg_catalog.pg_tables as select * from sys_tables;
CREATE OR REPLACE  FUNCTION pg_catalog.format_type(oid,integer) RETURNS text AS $$ BEGIN RETURN sys_catalog.format_type($1,$2);END;$$ LANGUAGE plsql;
CREATE OR REPLACE  FUNCTION pg_catalog.pg_get_indexdef(oid) RETURNS text AS $$ BEGIN RETURN sys_catalog.sys_get_indexdef($1); END; $$ LANGUAGE plsql;
CREATE OR REPLACE  FUNCTION public.postgis_lib_version() RETURNS text AS $$ BEGIN RETURN sys_catalog.postgis_lib_version(); END; $$ LANGUAGE plsql;
CREATE OR REPLACE  FUNCTION pg_my_temp_schema() RETURNS text AS $$ BEGIN RETURN  sys_my_temp_schema(); END; $$ LANGUAGE plsql;
CREATE OR REPLACE  FUNCTION sys_catalog.pg_get_function_identity_arguments(oid) RETURNS text AS $$ BEGIN RETURN sys_catalog.sys_get_function_identity_arguments($1);END;$$ LANGUAGE plsql;
CREATE OR REPLACE  FUNCTION sys_catalog.pg_backend_pid() RETURNS int4 AS $$ BEGIN RETURN sys_backend_pid(); END; $$ LANGUAGE plsql;
CREATE OR REPLACE  FUNCTION sys_catalog.pg_stat_get_backend_idset() RETURNS setof integer AS $$ BEGIN RETURN QUERY select sys_stat_get_backend_idset(); END; $$ LANGUAGE plsql;
CREATE OR REPLACE  FUNCTION sys_catalog.pg_stat_get_backend_pid(integer) RETURNS integer AS $$ BEGIN RETURN sys_stat_get_backend_pid($1); END; $$ LANGUAGE plsql;
